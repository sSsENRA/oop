
//1
#include <iostream>
#include <ctime>
using namespace std;

int main() {
    srand(time(NULL));
    int n, k, sum = 0;
    cout << "n= ";
    cin >> n;
    int* arr = new int[n];
    cout << "k= ";
    cin >> k;
    
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 10;
        cout << arr[i] << "\t";
    }

    cout << endl;

    for (int i = 0; i < n; i++) {
        if (arr[i] != 0 && k % arr[i] == 0 && i % 2 == 0) {
            sum += arr[i];
        }
    }

    cout << "sum= " << sum << endl;

    // Free the dynamically allocated memory
    delete[] arr;

    return 0;
}


//2
#include <iostream>
#include <cstring>

using namespace std;
#define N 3
#define A 3000


struct workers {
    int children_number;
    int salary;
};

int main()
{
    int sum=0;
    workers a[N];
    for(int i=0;i<N;i++){
        cout<<"enter children number:";
        cin >> a[i].children_number;
        cout<<"enter salary:";
        cin >> a[i].salary;
        cin.get();
    }

    for(int i=0;i<N;i++){
        if(a[i].salary < A){
            sum+= a[i].children_number;
        }
    }
    
    cout<<sum;

    return 0;
}










//3
#include <iostream>

using namespace std;

void quickSort(int arr[], int low, int high) {
    if (low < high) {
    
        int major = arr[high];
        int i = low - 1;

        for (int j = low; j <= high - 1; ++j) {
            if (arr[j] < major) {
                ++i;
                swap(arr[i], arr[j]);
            }
        }

        swap(arr[i + 1], arr[high]);

        int majorIndex = i + 1;

        quickSort(arr, low, majorIndex - 1);
        quickSort(arr, majorIndex + 1, high);
    }
}

int main() {
    int size;

    cout << "size of arr: ";
    cin >> size;

    int* arr = new int[size];

    cout << "enter arr: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }


    quickSort(arr, 0, size - 1);

    cout << "sorted arr: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    delete[] arr;

    return 0;
}
